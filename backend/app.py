#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Quest Supremacy IRL - Backend API
Vers√£o corrigida com paths din√¢micos para Render
"""

import os
import json
import hashlib
import uuid
from datetime import datetime
from flask import Flask, request, jsonify, session
from flask_cors import CORS

# Configura√ß√£o da aplica√ß√£o
app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'quest-supremacy-secret-2024')

# Configura√ß√£o CORS
cors_origins = os.environ.get('CORS_ORIGINS', 'https://quest-supremacy-irl.vercel.app,http://localhost:5173').split(',')
CORS(app, 
     origins=cors_origins,
     supports_credentials=True,
     allow_headers=['Content-Type', 'Authorization'],
     methods=['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'])

# Configura√ß√£o do banco de dados JSON com paths din√¢micos
def get_data_file_path():
    """Determina o caminho correto do arquivo de dados baseado no ambiente"""
    if os.environ.get('RENDER'):
        # No Render, usar caminho na raiz do projeto
        return '/opt/render/project/src/quest_data.json'
    else:
        # Local, usar caminho relativo ao arquivo atual
        return os.path.join(os.path.dirname(os.path.abspath(__file__)), 'quest_data.json')

DATA_FILE = get_data_file_path()

def ensure_data_dir():
    """Garante que o diret√≥rio do arquivo de dados existe"""
    try:
        data_dir = os.path.dirname(DATA_FILE)
        if not os.path.exists(data_dir):
            os.makedirs(data_dir, exist_ok=True)
            print(f"‚úÖ Diret√≥rio criado: {data_dir}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar diret√≥rio: {e}")
        return False

def init_data_file():
    """Inicializa o arquivo de dados se n√£o existir"""
    try:
        ensure_data_dir()
        
        if not os.path.exists(DATA_FILE):
            initial_data = {
                "users": {},
                "created_at": datetime.now().isoformat(),
                "version": "2.0-corrigida"
            }
            with open(DATA_FILE, 'w', encoding='utf-8') as f:
                json.dump(initial_data, f, indent=2, ensure_ascii=False)
            print(f"‚úÖ Arquivo de dados criado: {DATA_FILE}")
        else:
            print(f"‚úÖ Arquivo de dados existe: {DATA_FILE}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao inicializar arquivo de dados: {e}")
        return False

def load_data():
    """Carrega dados do arquivo JSON"""
    try:
        if not os.path.exists(DATA_FILE):
            if not init_data_file():
                raise Exception("Falha ao inicializar arquivo de dados")
        
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            data = json.load(f)
            return data
    except Exception as e:
        print(f"‚ùå Erro ao carregar dados: {e}")
        # Retornar dados padr√£o em caso de erro
        return {
            "users": {}, 
            "created_at": datetime.now().isoformat(), 
            "version": "2.0-corrigida"
        }

def save_data(data):
    """Salva dados no arquivo JSON"""
    try:
        ensure_data_dir()
        
        # Criar backup se arquivo existe
        if os.path.exists(DATA_FILE):
            backup_file = DATA_FILE + '.backup'
            try:
                with open(DATA_FILE, 'r', encoding='utf-8') as f:
                    backup_data = f.read()
                with open(backup_file, 'w', encoding='utf-8') as f:
                    f.write(backup_data)
            except Exception as e:
                print(f"‚ö†Ô∏è Aviso: N√£o foi poss√≠vel criar backup: {e}")
        
        # Salvar dados
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        print(f"‚úÖ Dados salvos em: {DATA_FILE}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao salvar dados: {e}")
        return False

def hash_password(password):
    """Hash seguro da senha"""
    try:
        return hashlib.sha256(password.encode('utf-8')).hexdigest()
    except Exception as e:
        print(f"‚ùå Erro ao fazer hash da senha: {e}")
        return None

def generate_initial_stats():
    """Gera status iniciais do jogador"""
    return {
        "forca": {"nivel": "F", "xp": 0, "max_xp": 100},
        "saude_mental": {"nivel": "F", "xp": 0, "max_xp": 100},
        "inteligencia": {"nivel": "F", "xp": 0, "max_xp": 100},
        "controle_vicios": {"nivel": "F", "xp": 0, "max_xp": 100},
        "saude_alimentar": {"nivel": "F", "xp": 0, "max_xp": 100},
        "resistencia": {"nivel": "F", "xp": 0, "max_xp": 100},
        "velocidade": {"nivel": "F", "xp": 0, "max_xp": 100},
        "carisma": {"nivel": "F", "xp": 0, "max_xp": 100},
        "habilidades": {"nivel": "F", "xp": 0, "max_xp": 100},
        "sexualidade": {"nivel": "F", "xp": 0, "max_xp": 100}
    }

def generate_daily_quests():
    """Gera quests di√°rias"""
    return [
        {
            "id": "quest_1",
            "title": "Ritual da For√ßa",
            "description": "Complete 30 minutos de exerc√≠cio f√≠sico",
            "status": "forca",
            "xp_reward": 15,
            "completed": False,
            "type": "daily"
        },
        {
            "id": "quest_2", 
            "title": "Mente Serena",
            "description": "Pratique 10 minutos de medita√ß√£o ou respira√ß√£o",
            "status": "saude_mental",
            "xp_reward": 12,
            "completed": False,
            "type": "daily"
        },
        {
            "id": "quest_3",
            "title": "Sabedoria Ancestral", 
            "description": "Leia por 20 minutos ou aprenda algo novo",
            "status": "inteligencia",
            "xp_reward": 10,
            "completed": False,
            "type": "daily"
        },
        {
            "id": "quest_4",
            "title": "Resist√™ncia √†s Trevas",
            "description": "Evite v√≠cios por todo o dia",
            "status": "controle_vicios", 
            "xp_reward": 20,
            "completed": False,
            "type": "daily"
        },
        {
            "id": "quest_5",
            "title": "Nutri√ß√£o Sagrada",
            "description": "Coma pelo menos 3 refei√ß√µes saud√°veis",
            "status": "saude_alimentar",
            "xp_reward": 12,
            "completed": False,
            "type": "daily"
        }
    ]

# Rotas da API

@app.route('/')
def home():
    """P√°gina inicial da API"""
    return jsonify({
        "message": "Quest Supremacy IRL API - Vers√£o Corrigida",
        "version": "2.0-corrigida",
        "status": "running",
        "data_file": DATA_FILE,
        "render_mode": bool(os.environ.get('RENDER')),
        "data_file_exists": os.path.exists(DATA_FILE),
        "endpoints": [
            "/health",
            "/api/auth/register",
            "/api/auth/login", 
            "/api/auth/logout",
            "/api/auth/check-auth",
            "/api/game/player-stats",
            "/api/game/daily-quests"
        ]
    })

@app.route('/health')
def health():
    """Health check detalhado"""
    try:
        data = load_data()
        return jsonify({
            "status": "healthy",
            "timestamp": datetime.now().isoformat(),
            "users_count": len(data.get("users", {})),
            "data_file": DATA_FILE,
            "data_file_exists": os.path.exists(DATA_FILE),
            "version": "2.0-corrigida",
            "render_mode": bool(os.environ.get('RENDER')),
            "data_dir_exists": os.path.exists(os.path.dirname(DATA_FILE)),
            "working_directory": os.getcwd(),
            "python_version": f"{os.sys.version_info.major}.{os.sys.version_info.minor}.{os.sys.version_info.micro}"
        })
    except Exception as e:
        return jsonify({
            "status": "error",
            "error": str(e),
            "timestamp": datetime.now().isoformat(),
            "data_file": DATA_FILE,
            "render_mode": bool(os.environ.get('RENDER'))
        }), 500

@app.route('/api/test')
def test():
    """Endpoint de teste"""
    return jsonify({
        "message": "API funcionando perfeitamente!",
        "timestamp": datetime.now().isoformat(),
        "cors_origins": cors_origins,
        "data_file": DATA_FILE,
        "render_mode": bool(os.environ.get('RENDER')),
        "test_status": "OK"
    })

@app.route('/api/auth/register', methods=['POST'])
def register():
    """Registro de usu√°rio com logs detalhados"""
    try:
        print("üîÑ [REGISTRO] Iniciando processo de registro...")
        print(f"üìÅ [REGISTRO] Arquivo de dados: {DATA_FILE}")
        print(f"üåê [REGISTRO] Modo Render: {bool(os.environ.get('RENDER'))}")
        
        # Validar dados de entrada
        data = request.get_json()
        if not data:
            print("‚ùå [REGISTRO] Dados n√£o fornecidos")
            return jsonify({"error": "Dados n√£o fornecidos"}), 400
            
        username = data.get('username', '').strip()
        email = data.get('email', '').strip()
        password = data.get('password', '')
        
        print(f"üìù [REGISTRO] Dados recebidos: username={username}, email={email}")
        
        # Valida√ß√µes b√°sicas
        if not username or len(username) < 3:
            print("‚ùå [REGISTRO] Username inv√°lido")
            return jsonify({"error": "Nome de usu√°rio deve ter pelo menos 3 caracteres"}), 400
            
        if not email or '@' not in email:
            print("‚ùå [REGISTRO] Email inv√°lido")
            return jsonify({"error": "Email inv√°lido"}), 400
            
        if not password or len(password) < 6:
            print("‚ùå [REGISTRO] Senha inv√°lida")
            return jsonify({"error": "Senha deve ter pelo menos 6 caracteres"}), 400
        
        print("‚úÖ [REGISTRO] Valida√ß√µes b√°sicas OK")
        
        # Carregar dados existentes
        print("üîÑ [REGISTRO] Carregando dados existentes...")
        db_data = load_data()
        users = db_data.get("users", {})
        
        print(f"üìä [REGISTRO] Usu√°rios existentes: {len(users)}")
        
        # Verificar se usu√°rio j√° existe
        for user_id, user_data in users.items():
            if user_data.get("username") == username:
                print(f"‚ùå [REGISTRO] Username j√° existe: {username}")
                return jsonify({"error": "Nome de usu√°rio j√° existe"}), 400
            if user_data.get("email") == email:
                print(f"‚ùå [REGISTRO] Email j√° existe: {email}")
                return jsonify({"error": "Email j√° cadastrado"}), 400
        
        print("‚úÖ [REGISTRO] Usu√°rio √∫nico confirmado")
        
        # Hash da senha
        print("üîÑ [REGISTRO] Fazendo hash da senha...")
        password_hash = hash_password(password)
        if not password_hash:
            print("‚ùå [REGISTRO] Erro ao fazer hash da senha")
            return jsonify({"error": "Erro ao processar senha"}), 500
        
        print("‚úÖ [REGISTRO] Hash da senha OK")
        
        # Criar novo usu√°rio
        user_id = str(uuid.uuid4())
        print(f"üÜî [REGISTRO] ID do usu√°rio: {user_id}")
        
        new_user = {
            "id": user_id,
            "username": username,
            "email": email,
            "password_hash": password_hash,
            "created_at": datetime.now().isoformat(),
            "stats": generate_initial_stats(),
            "daily_quests": generate_daily_quests(),
            "achievements": [],
            "level": 1,
            "total_xp": 0
        }
        
        print("‚úÖ [REGISTRO] Dados do usu√°rio criados")
        
        # Salvar usu√°rio
        print("üîÑ [REGISTRO] Salvando usu√°rio...")
        users[user_id] = new_user
        db_data["users"] = users
        
        if not save_data(db_data):
            print("‚ùå [REGISTRO] Erro ao salvar usu√°rio")
            return jsonify({"error": "Erro ao salvar usu√°rio"}), 500
        
        print("‚úÖ [REGISTRO] Usu√°rio salvo com sucesso")
        
        # Criar sess√£o
        session['user_id'] = user_id
        session['username'] = username
        
        print("‚úÖ [REGISTRO] Sess√£o criada")
        
        # Resposta de sucesso (sem senha)
        user_response = {
            "id": user_id,
            "username": username,
            "email": email,
            "created_at": new_user["created_at"]
        }
        
        print("üéâ [REGISTRO] Registro conclu√≠do com sucesso!")
        
        return jsonify({
            "message": "Usu√°rio registrado com sucesso!",
            "success": True,
            "user": user_response
        }), 201
        
    except Exception as e:
        print(f"‚ùå [REGISTRO] Erro cr√≠tico: {e}")
        import traceback
        traceback.print_exc()
        return jsonify({
            "error": "Erro interno do servidor", 
            "details": str(e),
            "data_file": DATA_FILE,
            "render_mode": bool(os.environ.get('RENDER'))
        }), 500

@app.route('/api/auth/login', methods=['POST'])
def login():
    """Login de usu√°rio"""
    try:
        print("üîÑ [LOGIN] Iniciando processo de login...")
        
        data = request.get_json()
        if not data:
            return jsonify({"error": "Dados n√£o fornecidos"}), 400
            
        username = data.get('username', '').strip()
        password = data.get('password', '')
        
        if not username or not password:
            return jsonify({"error": "Username e senha s√£o obrigat√≥rios"}), 400
        
        print(f"üìù [LOGIN] Tentativa de login: {username}")
        
        # Carregar dados
        db_data = load_data()
        users = db_data.get("users", {})
        
        # Buscar usu√°rio
        user_found = None
        for user_id, user_data in users.items():
            if user_data.get("username") == username:
                user_found = (user_id, user_data)
                break
        
        if not user_found:
            print(f"‚ùå [LOGIN] Usu√°rio n√£o encontrado: {username}")
            return jsonify({"error": "Usu√°rio n√£o encontrado"}), 401
        
        user_id, user_data = user_found
        
        # Verificar senha
        password_hash = hash_password(password)
        if password_hash != user_data.get("password_hash"):
            print(f"‚ùå [LOGIN] Senha incorreta para: {username}")
            return jsonify({"error": "Senha incorreta"}), 401
        
        # Criar sess√£o
        session['user_id'] = user_id
        session['username'] = username
        
        print(f"‚úÖ [LOGIN] Login realizado com sucesso: {username}")
        
        # Resposta de sucesso
        user_response = {
            "id": user_id,
            "username": user_data["username"],
            "email": user_data["email"]
        }
        
        return jsonify({
            "message": "Login realizado com sucesso!",
            "success": True,
            "user": user_response
        })
        
    except Exception as e:
        print(f"‚ùå [LOGIN] Erro: {e}")
        return jsonify({"error": "Erro interno do servidor"}), 500

@app.route('/api/auth/logout', methods=['POST'])
def logout():
    """Logout de usu√°rio"""
    try:
        username = session.get('username', 'Desconhecido')
        session.clear()
        print(f"‚úÖ [LOGOUT] Logout realizado: {username}")
        return jsonify({
            "message": "Logout realizado com sucesso!",
            "success": True
        })
    except Exception as e:
        print(f"‚ùå [LOGOUT] Erro: {e}")
        return jsonify({"error": "Erro interno do servidor"}), 500

@app.route('/api/auth/check-auth')
def check_auth():
    """Verificar autentica√ß√£o"""
    try:
        user_id = session.get('user_id')
        if not user_id:
            return jsonify({"authenticated": False}), 401
        
        # Carregar dados do usu√°rio
        db_data = load_data()
        users = db_data.get("users", {})
        user_data = users.get(user_id)
        
        if not user_data:
            session.clear()
            return jsonify({"authenticated": False}), 401
        
        user_response = {
            "id": user_id,
            "username": user_data["username"],
            "email": user_data["email"]
        }
        
        return jsonify({
            "authenticated": True,
            "user": user_response
        })
        
    except Exception as e:
        print(f"‚ùå [AUTH_CHECK] Erro: {e}")
        return jsonify({"error": "Erro interno do servidor"}), 500

@app.route('/api/game/player-stats')
def get_player_stats():
    """Obter status do jogador"""
    try:
        user_id = session.get('user_id')
        if not user_id:
            return jsonify({"error": "N√£o autenticado"}), 401
        
        db_data = load_data()
        users = db_data.get("users", {})
        user_data = users.get(user_id)
        
        if not user_data:
            return jsonify({"error": "Usu√°rio n√£o encontrado"}), 404
        
        return jsonify({
            "stats": user_data.get("stats", generate_initial_stats()),
            "level": user_data.get("level", 1),
            "total_xp": user_data.get("total_xp", 0)
        })
        
    except Exception as e:
        print(f"‚ùå [PLAYER_STATS] Erro: {e}")
        return jsonify({"error": "Erro interno do servidor"}), 500

@app.route('/api/game/daily-quests')
def get_daily_quests():
    """Obter quests di√°rias"""
    try:
        user_id = session.get('user_id')
        if not user_id:
            return jsonify({"error": "N√£o autenticado"}), 401
        
        db_data = load_data()
        users = db_data.get("users", {})
        user_data = users.get(user_id)
        
        if not user_data:
            return jsonify({"error": "Usu√°rio n√£o encontrado"}), 404
        
        return jsonify({
            "quests": user_data.get("daily_quests", generate_daily_quests())
        })
        
    except Exception as e:
        print(f"‚ùå [DAILY_QUESTS] Erro: {e}")
        return jsonify({"error": "Erro interno do servidor"}), 500

# Inicializa√ß√£o
if __name__ == '__main__':
    print("üöÄ QUEST SUPREMACY IRL - VERS√ÉO CORRIGIDA")
    print("=" * 70)
    print("‚úÖ Paths din√¢micos - Render/Local")
    print("‚úÖ Logs super detalhados")
    print("‚úÖ Tratamento robusto de erros")
    print("‚úÖ Inicializa√ß√£o autom√°tica")
    print("=" * 70)
    print(f"üìÅ Arquivo de dados: {DATA_FILE}")
    print(f"üåê Modo Render: {bool(os.environ.get('RENDER'))}")
    print(f"üìÇ Diret√≥rio atual: {os.getcwd()}")
    print("üöÄ Iniciando servidor...")
    print("üí° Use Ctrl+C para parar")
    print("=" * 70)
    
    # Inicializar arquivo de dados
    init_success = init_data_file()
    if init_success:
        print("‚úÖ Inicializa√ß√£o do banco de dados OK")
    else:
        print("‚ö†Ô∏è Problema na inicializa√ß√£o do banco, mas continuando...")
    
    # Configura√ß√£o para desenvolvimento/produ√ß√£o
    debug_mode = os.environ.get('FLASK_ENV') != 'production'
    port = int(os.environ.get('PORT', 5000))
    
    app.run(
        host='0.0.0.0',
        port=port,
        debug=debug_mode
    )
