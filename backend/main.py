#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
QUEST SUPREMACY IRL - BACKEND PARA PRODU√á√ÉO
==========================================
Vers√£o otimizada para deploy no Render
"""

from flask import Flask, request, jsonify, session
from flask_cors import CORS
import json
import os
import hashlib
import uuid
from datetime import datetime

# Configura√ß√£o da aplica√ß√£o
app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'quest-supremacy-ultra-secret-key-2024')

# CORS totalmente permissivo para desenvolvimento e produ√ß√£o
CORS(app, 
     origins=['*'],
     allow_headers=['*'],
     methods=['*'],
     supports_credentials=True)

# Arquivo de dados
DATA_FILE = 'users_data.json'

def log(message):
    """Log com timestamp"""
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"[{timestamp}] {message}")

def load_data():
    """Carrega dados do arquivo JSON"""
    try:
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r', encoding='utf-8') as f:
                data = json.load(f)
                log(f"‚úÖ Dados carregados: {len(data.get('users', []))} usu√°rios")
                return data
        else:
            log("üìÅ Arquivo de dados n√£o existe, criando novo")
            return {'users': []}
    except Exception as e:
        log(f"‚ùå Erro ao carregar dados: {e}")
        return {'users': []}

def save_data(data):
    """Salva dados no arquivo JSON"""
    try:
        with open(DATA_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        log(f"‚úÖ Dados salvos: {len(data.get('users', []))} usu√°rios")
        return True
    except Exception as e:
        log(f"‚ùå Erro ao salvar dados: {e}")
        return False

def hash_password(password):
    """Hash simples da senha"""
    return hashlib.sha256(password.encode()).hexdigest()

# Rotas principais
@app.route('/')
def home():
    log("üè† Acesso √† p√°gina inicial")
    return jsonify({
        'message': 'Quest Supremacy IRL - Backend em Produ√ß√£o',
        'status': 'online',
        'version': 'production-v1.0',
        'environment': 'render'
    })

@app.route('/health')
def health():
    log("‚ù§Ô∏è Health check")
    data = load_data()
    return jsonify({
        'status': 'healthy',
        'users_count': len(data.get('users', [])),
        'version': 'production',
        'timestamp': datetime.now().isoformat(),
        'environment': 'render'
    })

@app.route('/api/auth/register', methods=['POST', 'OPTIONS'])
def register():
    # Handle preflight OPTIONS request
    if request.method == 'OPTIONS':
        return '', 200
        
    log("üîÑ [REGISTRO] Iniciando processo de registro...")
    
    try:
        # Obter dados da requisi√ß√£o
        data = request.get_json()
        log(f"üìù [REGISTRO] Dados recebidos: {data}")
        
        if not data:
            log("‚ùå [REGISTRO] Nenhum dado recebido")
            return jsonify({'error': 'Nenhum dado recebido'}), 400
        
        username = data.get('username', '').strip()
        email = data.get('email', '').strip()
        password = data.get('password', '').strip()
        
        log(f"üìù [REGISTRO] Username: {username}, Email: {email}")
        
        # Valida√ß√µes b√°sicas
        if not username or not email or not password:
            log("‚ùå [REGISTRO] Campos obrigat√≥rios faltando")
            return jsonify({'error': 'Todos os campos s√£o obrigat√≥rios'}), 400
        
        if len(username) < 3:
            log("‚ùå [REGISTRO] Username muito curto")
            return jsonify({'error': 'Username deve ter pelo menos 3 caracteres'}), 400
        
        if len(password) < 6:
            log("‚ùå [REGISTRO] Senha muito curta")
            return jsonify({'error': 'Senha deve ter pelo menos 6 caracteres'}), 400
        
        # Carregar dados existentes
        log("üîÑ [REGISTRO] Carregando dados existentes...")
        users_data = load_data()
        users = users_data.get('users', [])
        
        # Verificar se usu√°rio j√° existe
        for user in users:
            if user.get('username') == username:
                log(f"‚ùå [REGISTRO] Username j√° existe: {username}")
                return jsonify({'error': 'Username j√° existe'}), 400
            if user.get('email') == email:
                log(f"‚ùå [REGISTRO] Email j√° existe: {email}")
                return jsonify({'error': 'Email j√° existe'}), 400
        
        log("‚úÖ [REGISTRO] Usu√°rio √∫nico confirmado")
        
        # Criar novo usu√°rio
        user_id = str(uuid.uuid4())
        password_hash = hash_password(password)
        
        log("üîÑ [REGISTRO] Criando novo usu√°rio...")
        
        new_user = {
            'id': user_id,
            'username': username,
            'email': email,
            'password_hash': password_hash,
            'created_at': datetime.now().isoformat(),
            'stats': {
                'for√ßa': {'level': 'F', 'xp': 0, 'max_xp': 100},
                'saude_mental': {'level': 'F', 'xp': 0, 'max_xp': 100},
                'inteligencia': {'level': 'F', 'xp': 0, 'max_xp': 100},
                'controle_vicios': {'level': 'F', 'xp': 0, 'max_xp': 100},
                'saude_alimentar': {'level': 'F', 'xp': 0, 'max_xp': 100},
                'resistencia': {'level': 'F', 'xp': 0, 'max_xp': 100},
                'velocidade': {'level': 'F', 'xp': 0, 'max_xp': 100},
                'carisma': {'level': 'F', 'xp': 0, 'max_xp': 100},
                'habilidades': {'level': 'F', 'xp': 0, 'max_xp': 100},
                'sexualidade': {'level': 'F', 'xp': 0, 'max_xp': 100}
            },
            'quests_completed': [],
            'achievements': [],
            'last_quest_date': None
        }
        
        # Adicionar usu√°rio √† lista
        users.append(new_user)
        users_data['users'] = users
        
        # Salvar dados
        log("üîÑ [REGISTRO] Salvando usu√°rio...")
        if save_data(users_data):
            log("‚úÖ [REGISTRO] Usu√°rio salvo com sucesso")
            
            # Criar sess√£o
            session['user_id'] = user_id
            session['username'] = username
            log(f"‚úÖ [REGISTRO] Sess√£o criada para: {username}")
            
            # Resposta de sucesso
            response_data = {
                'message': 'Usu√°rio registrado com sucesso!',
                'success': True,
                'user': {
                    'id': user_id,
                    'username': username,
                    'email': email
                }
            }
            
            log(f"üéâ [REGISTRO] Registro conclu√≠do com sucesso para: {username}")
            return jsonify(response_data), 201
        else:
            log("‚ùå [REGISTRO] Erro ao salvar usu√°rio")
            return jsonify({'error': 'Erro ao salvar usu√°rio'}), 500
            
    except Exception as e:
        log(f"‚ùå [REGISTRO] Erro inesperado: {str(e)}")
        return jsonify({'error': f'Erro interno: {str(e)}'}), 500

@app.route('/api/auth/login', methods=['POST', 'OPTIONS'])
def login():
    if request.method == 'OPTIONS':
        return '', 200
        
    log("üîÑ [LOGIN] Iniciando processo de login...")
    
    try:
        data = request.get_json()
        username = data.get('username', '').strip()
        password = data.get('password', '').strip()
        
        log(f"üìù [LOGIN] Tentativa de login: {username}")
        
        if not username or not password:
            return jsonify({'error': 'Username e senha s√£o obrigat√≥rios'}), 400
        
        # Carregar dados
        users_data = load_data()
        users = users_data.get('users', [])
        
        # Buscar usu√°rio
        password_hash = hash_password(password)
        for user in users:
            if (user.get('username') == username and 
                user.get('password_hash') == password_hash):
                
                # Criar sess√£o
                session['user_id'] = user['id']
                session['username'] = user['username']
                
                log(f"‚úÖ [LOGIN] Login bem-sucedido: {username}")
                return jsonify({
                    'message': 'Login realizado com sucesso!',
                    'success': True,
                    'user': {
                        'id': user['id'],
                        'username': user['username'],
                        'email': user['email']
                    }
                }), 200
        
        log(f"‚ùå [LOGIN] Credenciais inv√°lidas: {username}")
        return jsonify({'error': 'Credenciais inv√°lidas'}), 401
        
    except Exception as e:
        log(f"‚ùå [LOGIN] Erro inesperado: {str(e)}")
        return jsonify({'error': f'Erro interno: {str(e)}'}), 500

@app.route('/api/game/player-stats', methods=['GET'])
def get_player_stats():
    if 'user_id' not in session:
        return jsonify({'error': 'N√£o autenticado'}), 401
    
    users_data = load_data()
    users = users_data.get('users', [])
    
    for user in users:
        if user['id'] == session['user_id']:
            return jsonify(user['stats']), 200
    
    return jsonify({'error': 'Usu√°rio n√£o encontrado'}), 404

@app.route('/api/game/daily-quests', methods=['GET'])
def get_daily_quests():
    if 'user_id' not in session:
        return jsonify({'error': 'N√£o autenticado'}), 401
    
    # Quests padr√£o do dia
    daily_quests = [
        {
            'id': 'exercise',
            'title': 'Exercitar-se',
            'description': 'Fa√ßa pelo menos 30 minutos de exerc√≠cio',
            'xp_reward': 50,
            'completed': False
        },
        {
            'id': 'read',
            'title': 'Leitura',
            'description': 'Leia por pelo menos 20 minutos',
            'xp_reward': 30,
            'completed': False
        },
        {
            'id': 'meditate',
            'title': 'Medita√ß√£o',
            'description': 'Medite por 10 minutos',
            'xp_reward': 40,
            'completed': False
        }
    ]
    
    return jsonify(daily_quests), 200

@app.route('/api/auth/logout', methods=['POST'])
def logout():
    log("üîÑ [LOGOUT] Fazendo logout...")
    session.clear()
    log("‚úÖ [LOGOUT] Logout realizado")
    return jsonify({'message': 'Logout realizado com sucesso!'}), 200

@app.route('/api/auth/check-auth')
def check_auth():
    log("üîÑ [AUTH] Verificando autentica√ß√£o...")
    
    if 'user_id' in session:
        log(f"‚úÖ [AUTH] Usu√°rio autenticado: {session.get('username')}")
        return jsonify({
            'authenticated': True,
            'user': {
                'id': session['user_id'],
                'username': session['username']
            }
        }), 200
    else:
        log("‚ùå [AUTH] Usu√°rio n√£o autenticado")
        return jsonify({'authenticated': False}), 401

# Rota de teste
@app.route('/api/test')
def test():
    log("üß™ Teste da API")
    return jsonify({
        'message': 'API funcionando perfeitamente em produ√ß√£o!',
        'status': 'success',
        'timestamp': datetime.now().isoformat(),
        'environment': 'render'
    })

if __name__ == '__main__':
    log("üöÄ QUEST SUPREMACY IRL - BACKEND PRODU√á√ÉO")
    log("=" * 60)
    log("‚úÖ CORS configurado para Vercel")
    log("‚úÖ Logs detalhados")
    log("‚úÖ Tratamento robusto de erros")
    log("‚úÖ Pronto para produ√ß√£o")
    log("=" * 60)
    
    # Testar carregamento de dados na inicializa√ß√£o
    data = load_data()
    log(f"üìä Usu√°rios existentes: {len(data.get('users', []))}")
    
    # Iniciar servidor
    port = int(os.environ.get('PORT', 5000))
    log(f"üöÄ Iniciando servidor na porta {port}")
    
    app.run(
        host='0.0.0.0',
        port=port,
        debug=False
    )
